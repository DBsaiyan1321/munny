{"version":3,"sources":["components/Nav/Nav.js","components/ReusableComponents/Button.js","util/riskLevels.js","components/ReusableComponents/DoughnutChart.js","components/ReusableComponents/SelectMenu.js","components/ReusableComponents/DropDisplay.js","components/ReusableComponents/RiskLevelSheetRow.js","components/ReusableComponents/HomePageBox.js","components/Home/HomePage.js","actions/risk_actions.js","components/Home/HomePageContainer.js","actions/new_amounts_actions.js","actions/differences_actions.js","actions/inputs_actions.js","util/calculatorUtil.js","actions/transfers_actions.js","actions/calculator_actions.js","components/ReusableComponents/CalculatorInputs.js","components/Calculator/CalculatorPage.js","components/Calculator/CalculatorPageContainer.js","components/App.js","components/Root.js","reducers/inputs_reducer.js","reducers/differences_reducer.js","reducers/new_amounts_reducer.js","reducers/transfers_reducer.js","reducers/calculator_reducer.js","reducers/risk_reducer.js","reducers/root_reducer.js","store/store.js","index.js"],"names":["Nav","className","to","Button","onClick","text","textStyle","buttonStyle","riskLevels","1","level","bonds","largeCap","midCap","foreign","smallCap","2","3","4","5","6","7","8","9","10","DoughnutChart","props","useState","chart","setChart","chartRef","useRef","useEffect","myChartRef","current","getContext","Chart","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","legend","fontColor","events","plugins","render","position","copy","forEach","dataset","update","id","width","height","ref","SelectMenu","defaultSelected","toggle","setToggle","selected","setSelected","map","option","i","DropDisplay","title","children","titleClasses","bodyClasses","RiskLevelSheetRow","category","percentage","style","HomePageBox","icon","HomePage","mySelectRef","doughnut","setDoughnut","levels","chartLabels","state","risk","chartData","window","scrollTo","scrollIntoView","behavior","setRiskLevel","RECEIVE_RISK_LEVEL","connect","dispatch","payload","RECEIVE_NEW_AMOUNTS","REMOVE_NEW_AMOUNTS","RECEIVE_DIFFERENCES","RECEIVE_INPUTS","categoryStringObject","getTotal","inputsObject","total","input","parseFloat","toFixed","calculateNewAmount","calculateDifference","amount","expected","isNegative","number","RECEIVE_TRANSFERS","handleInputs","inputs","getState","newAmounts","differences","transfers","words","returnVal","arr","difference","push","cat","val","sort","a","b","j","length","sum","Math","abs","findMinimumTransfers","receiveInputs","receiveNewAmounts","receiveDifferences","receiveTransfers","CalculatorInputs","onChange","value","CalculatorPage","calculator","setBonds","setMidCap","setLargeCap","setForeign","setSmallCap","error","setError","Object","keys","e","currentTarget","transfer","isNaN","validateInputs","App","exact","path","component","HomePageContainer","CalculatorPageContainer","Root","store","CalculatorReducer","initialState","action","freeze","DifferencesReducer","NewAmountsReducer","TransfersReducer","combineReducers","InputsReducer","RiskReducer","rootReducer","configureStore","preloadedState","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4db4010.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Nav.css\";\nimport { GiMoneyStack } from \"react-icons/gi\";\nimport { AiFillHome } from \"react-icons/ai\";\n\nconst Nav = () => { \n    return (\n        <nav className=\"navbar\">\n            <Link to=\"/\"><GiMoneyStack className=\"navbar__logo\" /></Link>\n            <Link to=\"/\"><AiFillHome className=\"navbar__logo\" /></Link>\n        </nav>\n    )\n};\n\nexport default Nav;","import React from \"react\";\nimport \"./Button.css\";\n\nconst Button = ({ onClick, text, textStyle, buttonStyle }) => { \n    return (\n        <button \n            className={\"risk-button\"}\n            onClick={onClick}\n            // disabled\n        >\n            {text}\n        </button>\n    )\n};\n\nexport default Button;","// These are the hardcoded risk levels and their corresponding percentages.\nexport const riskLevels = { \n    1: {\n        level: 1, \n        bonds: 80, \n        largeCap: 20, \n        midCap: 0, \n        foreign: 0,\n        smallCap: 0\n    },\n    2: {\n        level: 2,\n        bonds: 70,\n        largeCap: 15,\n        midCap: 15,\n        foreign: 0,\n        smallCap: 0\n    },\n    3: {\n        level: 3,\n        bonds: 60,\n        largeCap: 15,\n        midCap: 15,\n        foreign: 10,\n        smallCap: 0\n    },\n    4: {\n        level: 4,\n        bonds: 50,\n        largeCap: 20,\n        midCap: 20,\n        foreign: 10,\n        smallCap: 0\n    },\n    5: {\n        level: 5,\n        bonds: 40,\n        largeCap: 20,\n        midCap: 20,\n        foreign: 20,\n        smallCap: 0\n    },\n    6: {\n        level: 6,\n        bonds: 35,\n        largeCap: 25,\n        midCap: 5,\n        foreign: 30,\n        smallCap: 5\n    },\n    7: {\n        level: 7,\n        bonds: 20,\n        largeCap: 25,\n        midCap: 25,\n        foreign: 25,\n        smallCap: 5\n    },\n    8: {\n        level: 8,\n        bonds: 10,\n        largeCap: 20,\n        midCap: 40,\n        foreign: 20,\n        smallCap: 10\n    },\n    9: {\n        level: 9,\n        bonds: 5,\n        largeCap: 15,\n        midCap: 40,\n        foreign: 25,\n        smallCap: 15\n    },\n    10: {\n        level: 10,\n        bonds: 0,\n        largeCap: 5,\n        midCap: 25,\n        foreign: 30,\n        smallCap: 40\n    }\n};","import React, { useEffect, useRef, useState } from \"react\"; \nimport Chart from 'chart.js';\nimport \"chartjs-plugin-labels\";\nimport \"./DoughnutChart.css\";\n\nconst DoughnutChart = props => { \n    const [chart, setChart] = useState(null);\n\n    const chartRef = useRef();\n\n    useEffect(() => { \n        const myChartRef = chartRef.current.getContext(\"2d\");\n\n        setChart(new Chart(myChartRef, {\n            type: 'doughnut',\n            data: {\n                labels: props.labels,\n                datasets: [{\n                    label: '# of Votes',\n                    data: props.data,\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                legend: {\n                    labels: {\n                        fontColor: 'white'\n                    }\n                },\n                events: [],\n                plugins: {\n                    labels: [\n                        {\n                            render: 'label',\n                            fontColor: 'white'\n                        },\n                        {\n                            render: 'percentage',\n                            position: 'outside'\n                        } \n                    ]\n                }\n            }\n        }))\n    }, []); \n\n    useEffect(() => { \n        if (chart) { \n            let copy = chart; \n            copy.data.datasets.forEach(dataset => {\n                dataset.data = props.data;\n            });\n            copy.update();\n            setChart(copy);\n        }\n    }, [props.data])\n\n    return <div className=\"chart\"><canvas id=\"myChart\" width=\"200\" height=\"200\" ref={chartRef}></canvas></div>\n};\n\nexport default DoughnutChart;","import React, { useState } from \"react\";\nimport \"./SelectMenu.css\"; \nimport { TiArrowSortedDown, TiArrowSortedUp } from \"react-icons/ti\";\n\nconst SelectMenu = ({options, onClick, defaultSelected}) => { \n    const [toggle, setToggle] = useState(false);\n    const [selected, setSelected] = useState(defaultSelected || \"Select Level\")\n\n    const changeMenu = () => { \n        setToggle(!toggle);\n    }\n\n    // window.addEventListener('click', function (e) {\n    //     console.log(e);\n    //     setToggle(null);\n    // });\n\n    return (\n        <>\n            <div className={`select-menu ${toggle ? \"toggle\" : \"\"}`} onClick={() => setToggle(!toggle)}>\n                <div className=\"select-menu__selected\">\n                    <p>{selected}</p>\n                    {toggle ? <TiArrowSortedUp /> : <TiArrowSortedDown />}\n                </div>\n                <ul className=\"select-list\">\n                    { \n                        options.map((option, i) => <li className=\"select-list__item\" key={i} onClick={() => { onClick(option); setSelected(option); }}>{option}</li>)\n                    }\n                </ul>\n            </div>\n        </>\n    )\n};\n\nexport default SelectMenu;","import React, { useEffect, useState } from \"react\";\nimport { TiArrowSortedDown, TiArrowSortedUp } from \"react-icons/ti\";\nimport \"./DropDisplay.css\";\n\nconst DropDisplay = ({ title, children, selected, titleClasses, bodyClasses }) => { \n    const [toggle, setToggle] = useState(selected ? \"toggle\" : \"\");\n\n    useEffect(() => { \n        if (selected && toggle === \"\") setToggle(\"toggle\");\n    }, [selected])\n\n    const changeMenu = () => {\n        if (toggle === \"toggle\") {\n            setToggle(\"\");\n        } else {\n            setToggle(\"toggle\");\n        }\n    }\n\n    return (\n        <>\n            <div className={`drop-display ${toggle}`}>\n                <div className={`drop-display__title ${titleClasses}`} onClick={changeMenu}>\n                    <p>{title}</p>  \n                    {toggle ? <TiArrowSortedUp /> : <TiArrowSortedDown /> }\n                </div>\n                <div className={`drop-display-info ${bodyClasses}`}>\n                    {children}\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default DropDisplay;","import React from \"react\";\nimport \"./RiskLevelSheetRow.css\";\n\nconst RiskLevelSheetRow = ({ category, percentage, style}) => { \n    return ( \n        <li className={`risk-level-sheet__row ${style ? style : \"\"}`}>\n            <p>{category}</p>\n            <p>{percentage}</p>\n        </li>\n    )\n};\n\nexport default RiskLevelSheetRow;","import React from \"react\"; \nimport \"./HomePageBox.css\";\n\nconst HomePageBox = ({icon, title, text}) => { \n    return ( \n        <div className=\"home-page-box\">\n            <div className=\"home-page-box__icon\">{icon}</div>\n            <h1 className=\"home-page-box__title\">{title}</h1>\n            <p className=\"home-page-box__text\">{text}</p>\n        </div>\n    )\n};\n\nexport default HomePageBox;","import React, { useState, useRef, useEffect } from \"react\"; \nimport Nav from \"../Nav/Nav\";\nimport Button from \"../ReusableComponents/Button\";\nimport { Link } from \"react-router-dom\"\nimport \"./HomePage.css\";\nimport { riskLevels } from \"../../util/riskLevels\";\nimport DoughnutChart from \"../ReusableComponents/DoughnutChart\";\nimport SelectMenu from \"../ReusableComponents/SelectMenu\";\nimport DropDisplay from \"../ReusableComponents/DropDisplay\";\nimport RiskLevelSheetRow from \"../ReusableComponents/RiskLevelSheetRow\";\nimport HomePageBox from \"../ReusableComponents/HomePageBox\";\n\nconst HomePage = props => { \n    const mySelectRef = useRef(null);\n\n    const [doughnut, setDoughnut] = useState(false);\n\n    const levels = [1,2,3,4,5,6,7,8,9,10];\n\n    const chartLabels = \"level\" in props.state.risk ? [\"Bonds\", \"Large Cap\", \"Mid Cap\", \"Foreign\", \"Small Cap\"] : [\"Select Level\", \"Select Level\", \"Select Level\", \"Select Level\", \"Select Level\"];\n    const chartData = \"level\" in props.state.risk ? [props.state.risk.bonds, props.state.risk.largeCap, props.state.risk.midCap, props.state.risk.foreign, props.state.risk.smallCap,] : [20, 20, 20, 20, 20];\n    const executeScroll = () => mySelectRef.current.scrollIntoView({ behavior: 'smooth' });\n    // run this function from an event handler or an effect to execute scroll\n\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, []);\n\n    return (\n        <>\n            <Nav />\n            <div className=\"home-page\"> \n                <div className=\"hero\"> \n                    <p className=\"hero-main\">Money works. Not you.</p>\n                    <p className=\"hero-other\">Start by getting an investment portfolio recommendation today!</p>\n                    <Button text=\"Get Started\" onClick={executeScroll} />\n                </div>\n                <div className=\"home-page-second\"> \n                    <HomePageBox icon=\"1\" title=\"Risk Level\" text=\"Pick the level of risk that you want to invest with. Don't worry, we have all of the information you need.\" />\n                    <HomePageBox icon=\"2\" title=\"Examine Choice\" text=\"There is a guide on each risk level. You can either look at a chart or a simple display.\" />\n                    <HomePageBox icon=\"3\" title=\"Enter Amounts\" text=\"Provide the amount of money you have allocated for each category of your portfolio.\" />\n                    <HomePageBox icon=\"4\" title=\"We Recommend\" text=\"Based off of your inputs, our special code provides you with all of the knowledge you need.\" />\n                </div>\n                <div className=\"home-page-third\" ref={mySelectRef}>\n                    <p className=\"home-page__header\">Please Select A Risk Level For Your Investment Portfolio. 1 is low, 10 is high.</p>\n                    <SelectMenu options={levels} onClick={level => props.setRiskLevel(level)} />\n                    <Button text={ doughnut ? \" Sheet\" : \"Doughnut\"} onClick={() => setDoughnut(!doughnut)} />\n                    {\"level\" in props.risk ? <Link to=\"/calculator\"><Button text=\"Continue\" /></Link> : null}\n                </div>\n                <div className=\"home-page__info\"> \n                    {!doughnut ? (\n                        <div className=\"grid-container\">\n                            {levels.map(level => {\n                                return (\n                                    <DropDisplay title={`Risk Level ${level}`} key={level} selected={level === props.state.risk.level}>\n                                        <ul className=\"risk-level-sheet\">\n                                            <RiskLevelSheetRow category=\"Category\" percentage=\"Percentage\" style=\"risk-level-sheet-row--header\" /> \n                                            <RiskLevelSheetRow category=\"Bonds\" percentage={riskLevels[level].bonds} /> \n                                            <RiskLevelSheetRow category=\"Large Cap\" percentage={riskLevels[level].largeCap} /> \n                                            <RiskLevelSheetRow category=\"Mid Cap\" percentage={riskLevels[level].midCap} /> \n                                            <RiskLevelSheetRow category=\"Foreign\" percentage={riskLevels[level].foreign} /> \n                                            <RiskLevelSheetRow category=\"Small Cap\" percentage={riskLevels[level].smallCap} />                \n                                        </ul>\n                                    </DropDisplay>\n                                )\n                            })}\n                        </div>\n                    ) : <DoughnutChart data={chartData} labels={chartLabels} />\n                    }\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default HomePage;","import { riskLevels } from \"../util/riskLevels\";\n\nexport const RECEIVE_RISK_LEVEL = \"RECEIVE_RISK_LEVEL\";\n\nexport const setRiskLevel = level => ({\n    type: RECEIVE_RISK_LEVEL, \n    payload: riskLevels[level]\n});\n","import { connect } from \"react-redux\";\nimport HomePage from \"./HomePage\";\nimport { setRiskLevel } from \"../../actions/risk_actions\";\n\nconst mapStateToProps = state => ({ \n    state,\n    risk: state.risk\n});\n\nconst mapDispatchToProps = dispatch => ({ \n    setRiskLevel: level => dispatch(setRiskLevel(level))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);","export const RECEIVE_NEW_AMOUNTS = \"RECEIVE_NEW_AMOUNTS\";\nexport const REMOVE_NEW_AMOUNTS = \"REMOVE_NEW_AMOUNTS\";\n\nexport const receiveNewAmounts = newAmounts => ({\n    type: RECEIVE_NEW_AMOUNTS,\n    newAmounts\n});\n\nexport const removeNewAmounts = () => ({\n    type: REMOVE_NEW_AMOUNTS\n})","export const RECEIVE_DIFFERENCES = \"RECEIVE_DIFFERENCES\";\n\nexport const receiveDifferences = differences => ({\n    type: RECEIVE_DIFFERENCES,\n    differences\n});","export const RECEIVE_INPUTS = \"RECEIVE_INPUTS\";\n\nexport const receiveInputs = inputs => ({\n    type: RECEIVE_INPUTS,\n    inputs\n});","export const categoryStringObject = {\n    bonds: \"Bonds\",\n    midCap: \"Mid Cap\",\n    largeCap: \"Large Cap\",\n    foreign: \"Foreign\",\n    smallCap: \"Small Cap\"\n};\n\n// Given an object of inputs, where the keys are the categories and the values are the amounts in dollars, calculate the grand total.\nexport const getTotal = inputsObject => {\n    let total = 0;\n    for (const input in inputsObject) {\n        total += parseFloat(inputsObject[input]);\n    }\n    return total.toFixed(2);\n};\n\n\n// Given the total (dollars) and a percentage, output the dollar amount of that percentage of the total.\nexport const calculateNewAmount = (total, percentage) => (total * (percentage / 100)).toFixed(2);\n\n\n// Given an amount and what we expect the amount should be, return the difference.\nexport const calculateDifference = (amount, expected) => (amount - expected).toFixed(2);\n\n\n// Determine whether the input is positive\nexport const isPositive = number => number > 0;\n\n\n// Determine whether the input is negative.\nexport const isNegative = number => number < 0;\n\n\n// Zero is neither positive nor negative.\n\n\n// Given an object of differences (keys are the category names and the values are the differences), \n// find the minimum number of transfers need to balance everything out.\nexport const findMinimumTransfers = differences => {\n    const words = {\n        bonds: \"Bonds\",\n        midCap: \"Mid Cap\",\n        largeCap: \"Large Cap\",\n        foreign: \"Foreign\",\n        smallCap: \"Small Cap\"\n    };\n\n    const returnVal = [];\n\n    const arr = []\n    for (const difference in differences) {\n        arr.push({ cat: difference, val: differences[difference] });\n    }\n\n    arr.sort((a, b) => a.val - b.val);\n\n    let i = 0;\n    let j = arr.length - 1;\n\n    while (i < j) {\n        const sum = parseFloat(arr[i].val) + parseFloat(arr[j].val);\n        if (sum > 0) {\n            arr[j].val = sum;\n            returnVal.push(`Transfer $${(Math.abs(arr[i].val)).toFixed(2)} from ${words[arr[j].cat]} to ${words[arr[i].cat]}`);\n            i++;\n        } else if (sum < 0) {\n            arr[i].val = sum;\n            returnVal.push(`Transfer $${(Math.abs(arr[j].val)).toFixed(2)} from ${words[arr[j].cat]} to ${words[arr[i].cat]}`);\n            j--;\n        } else {\n            if (Math.abs(arr[j].val) !== 0) { \n                returnVal.push(`Transfer $${(Math.abs(arr[j].val)).toFixed(2)} from ${words[arr[j].cat]} to ${words[arr[i].cat]}`)\n            } \n            i++;\n            j--;\n        }\n    }\n    return returnVal;\n};\n\n// Example 1-\n// {\n//     bonds: -200,\n//     largeCap: -150, \n//     midCap: 50, \n//     foreign: 100, \n//     smallCap: 200\n// }\n// Answer: \n// • Transfer $200 from Bonds to Small Cap.\n// • Transfer $100 from Large Cap to Foreign.\n// • Transfer $50 from Large Cap to Mid Cap.\n\n// [-200, -150]\n// [50,100,200]\n\n// [-150]\n// [50,100]\n\n// [-50]\n// [50]\n//     i     i        j      j\n// [-200, -150, 50, 100, 200]\n\n// Example 2- \n// {\n//     bonds: -200,\n//     largeCap: -149,\n//     midCap: 235,\n//     foreign: 106, \n//     smallCap: 8\n// }\n// Answer: \n// • Transfer $106 from Large Cap to Foreign.\n// • Transfer $8 from Large Cap to Small Cap.\n// • Transfer $35 from Large Cap to Mid Cap.\n// • Transfer $200 from Bonds to Mid Cap.\n// i                     j         i           j\n// [-200, -149, 8, 106, 235] => [-149, 8, 106, 35]\n// Transfer 200 from Bonds to Mid Cap\n\n// if ((arr[i] + arr[j]) > 0) { \n//     arr[j] = (arr[i] + arr[j]) \n//     push statement into output\n//     \"array[i].cat owes array[j].cat arr[i]\"\n//     i++\n// } else if ((arr[i] + arr[j]) < 0) { \n//     arr[j] = (arr[i] + arr[j])\n//     \"array[i].cat owes array[j].cat arr[j]\"\n//     push statement into output\n//     j--\n// } else { \n//     push statement into output\n//     \"array[i].cat owes array[j].cat array[i]\"\n//     i++\n//     j++\n// }\n\n// [-149, 8, 106, 35]\n\n// Right off the bat, I notice that the amount that we are down is the same amount we are up. What I mean is that we\n// are a total of 350 down in bonds and largeCap then 350 up in the rest of the categories. \n\n// If I order the ups from smallest to largest, then do the same for the downs, it's easy to calculate. \n\n// Example 2-\n// ups = [8,106,235]\n// downs = [149, 200] // We don't consider them negative\n// Move backwards through both and compare\n// 235 - 200 = 35. So we know we can transfer 200 from bonds to midCap\n\n// Now the arrays look like\n// ups = [8,106,35]\n// downs = [149]\n// 149 - 35. We know we can transfer the rest of our largeCap to midCap\n\n// ups = [8,106]\n// downs = [114]\n// 114 - 106. We can transfer 106 from largecap to foreign.\n\n// ups = [8]\n// downs = [8]\n// 8 - 8. We can transfer 8 from largecap to smallcap\n\n// downs means we need to go down in those account because we have too much.\n// ups means we need to go up in those accounts because we don't have enough\n\n// I guess a min heap and max heap would work in this case too.\n// Maybe I just need to sort one array, then have a pointer on one end and a pointer on the other.","export const RECEIVE_TRANSFERS = \"RECEIVE_TRANSFERS\";\n\nexport const receiveTransfers = transfers => ({ \n    type: RECEIVE_TRANSFERS, \n    transfers\n});","import { receiveNewAmounts } from \"./new_amounts_actions\";\nimport { receiveDifferences } from \"./differences_actions\";\nimport { receiveInputs } from \"./inputs_actions\";\nimport { calculateNewAmount, calculateDifference, getTotal, findMinimumTransfers } from \"../util/calculatorUtil\";\nimport { receiveTransfers } from \"./transfers_actions\";\n\n// Thunk action used to dispatch multiple things at once. Since they all rely on \n// the same inputs and risk level, I thought this was the cleanest way to do it. \nexport const handleInputs = inputs => (dispatch, getState) => { \n    const { risk } = getState();\n\n    const total = getTotal(inputs);\n\n    const newAmounts = {\n        bonds: calculateNewAmount(total, risk.bonds),\n        midCap: calculateNewAmount(total, risk.midCap),\n        largeCap: calculateNewAmount(total, risk.largeCap),\n        foreign: calculateNewAmount(total, risk.foreign),\n        smallCap: calculateNewAmount(total, risk.smallCap)\n    };\n\n    const differences = {\n        bonds: calculateDifference(inputs.bonds, newAmounts.bonds),\n        midCap: calculateDifference(inputs.midCap, newAmounts.midCap),\n        largeCap: calculateDifference(inputs.largeCap, newAmounts.largeCap),\n        foreign: calculateDifference(inputs.foreign, newAmounts.foreign),\n        smallCap: calculateDifference(inputs.smallCap, newAmounts.smallCap)\n    };\n\n    const transfers = findMinimumTransfers(differences);\n\n    dispatch(receiveInputs(inputs));\n    dispatch(receiveNewAmounts(newAmounts));\n    dispatch(receiveDifferences(differences));\n    dispatch(receiveTransfers(transfers));\n}","import React from \"react\";\nimport \"./CalculatorInputs.css\";\n\nconst CalculatorInputs = ({ label, onChange, value }) => { \n    return (\n        <label className=\"current-amounts__label\">\n            {label}: $\n            <input className=\"current-amounts__input\" onChange={onChange} value={value} type=\"number\" />\n        </label>\n    )\n};\n\nexport default CalculatorInputs;","import React, { useState, useEffect } from \"react\"; \nimport \"./CalculatorPage.css\";\nimport Nav from \"../Nav/Nav\";\nimport DropDisplay from \"../ReusableComponents/DropDisplay\";\nimport Button from \"../ReusableComponents/Button\";\nimport RiskLevelSheetRow from \"../ReusableComponents/RiskLevelSheetRow\";\nimport { getTotal, isNegative, categoryStringObject } from \"../../util/calculatorUtil\";\nimport { Redirect } from \"react-router-dom\";\nimport CalculatorInputs from \"../ReusableComponents/CalculatorInputs\";\n\nconst CalculatorPage = ({ risk, calculator, handleInputs }) => { \n    const [bonds, setBonds] = useState(calculator.inputs.bonds || 0);\n    const [midCap, setMidCap] = useState(calculator.inputs.midCap || 0);\n    const [largeCap, setLargeCap] = useState(calculator.inputs.largeCap || 0);\n    const [foreign, setForeign] = useState(calculator.inputs.foreign || 0);\n    const [smallCap, setSmallCap] = useState(calculator.inputs.smallCap || 0);\n    const [error, setError] = useState(\"\");\n\n    const inputs = {\n        bonds,\n        midCap,\n        largeCap,\n        foreign,\n        smallCap\n    };\n\n    const validateInputs = () => {\n        for (const input in inputs) {\n            if (inputs[input] === \"\") return false;\n            const value = parseFloat(inputs[input] * 1);\n            if (isNaN(value) || isNegative(value)) return false;\n        }\n\n        setError(\"\");\n        return true;\n    }\n\n    useEffect(() => {\n        window.scrollTo(0, 0)\n    }, [])\n\n    return !risk.level ? <Redirect to=\"/\" /> : (\n        <>\n            <Nav />\n            <div className=\"calculator-page\">\n                \n                <h1>Calculator Page</h1>\n                {/* <div className=\"calculator-user-info\">  */}\n                    <div className=\"calculator-slot\"> \n                        <p className=\"calculator-slot__text\">This is the risk level you chose in the previous step. Your results with be based off of the percentages that correspond with the risk level.</p>\n                        <DropDisplay title={`Risk Level ${risk.level}`} selected>\n                            <ul className=\"risk-level-sheet\">\n                                <RiskLevelSheetRow category=\"Category\" percentage=\"Percentage\" style=\"risk-level-sheet-row--header\" />\n                                { Object.keys(categoryStringObject).map((category, i) => { \n                                    return <RiskLevelSheetRow category={categoryStringObject[category]} percentage={risk[category]} key={i} />\n                                })}\n                            </ul>\n                        </DropDisplay>\n                    </div>\n\n                    <div className=\"calculator-slot\">\n                        <p className=\"calculator-slot__text\">\n                            Enter the amount of money in DOLLARS, not percentage,\n                            that you have allocated towards each category.\n                        </p>\n                        <DropDisplay title=\"Current Amounts\" selected>\n                            <div className=\"current-amounts\">\n                                <CalculatorInputs label=\"Bonds\" onChange={e => setBonds(e.currentTarget.value)} value={bonds} />\n                                <CalculatorInputs label=\"Mid Cap\" onChange={e => setMidCap(e.currentTarget.value)} value={midCap} />\n                                <CalculatorInputs label=\"Large Cap\" onChange={e => setLargeCap(e.currentTarget.value)} value={largeCap} />\n                                <CalculatorInputs label=\"Foreign\" onChange={e => setForeign(e.currentTarget.value)} value={foreign} />\n                                <CalculatorInputs label=\"Small Cap\" onChange={e => setSmallCap(e.currentTarget.value)} value={smallCap} />\n                                <p className=\"error-message\">{error}</p>\n                            </div>\n                        </DropDisplay>\n                    </div>\n                {/* </div> */}\n\n                {/* <div className=\"calculator-results\">  */}\n                    {\"level\" in risk && Object.keys(calculator.inputs).length > 0 && Object.keys(calculator.differences).length > 0 ? <>\n                        <div className=\"calculator-slot\">\n                            <p className=\"calculator-slot__text\">\n                                This is the grand total of all of the money you \n                                have for your portfolio.\n                            </p>\n                            <DropDisplay title=\"Total\" selected>\n                                <p className=\"calculator-page__info\">{getTotal(calculator.inputs)}</p>\n                            </DropDisplay>\n                        </div>\n\n                        <div className=\"calculator-slot\">\n                            <p className=\"calculator-slot__text\">\n                                These new amounts are what we recommend you have\n                                in each category.\n                            </p>\n                            <DropDisplay title=\"New Amounts\" selected>\n                                <div className=\"calculator-page__info\">\n                                    {Object.keys(categoryStringObject).map((category, i) => {\n                                        return <div key={i}>{categoryStringObject[category]}: <p className=\"calculator-blue\">{calculator.newAmounts[category]}</p></div>\n                                    })}\n                                </div>\n                            </DropDisplay>\n                        </div>\n\n                        <div className=\"calculator-slot\">\n                            <p className=\"calculator-slot__text\">\n                                Differences are the comparison between the amount \n                                of money you have allocated towards each category \n                                vs the amount of money we recommend from the new \n                                amounts given above. \n                            </p>\n                            <DropDisplay title=\"Differences\" selected>\n                                <div className=\"calculator-page__info\">\n                                    {Object.keys(categoryStringObject).map((category, i) => {\n                                        return <div key={i}>{categoryStringObject[category]}: <p className={isNegative(calculator.differences[category]) ? \"calculator-red\" : \"calculator-green\"}>{calculator.differences[category]}</p></div>\n                                    })}\n                                </div>\n                            </DropDisplay>\n                        </div>\n\n                        <div className=\"calculator-slot\">\n                            <p className=\"calculator-slot__text\">\n                                These are the transfers we recommend you make so your\n                                categories match our recommended amounts perfectly.\n                                This is minimum number of transfers you would have to\n                                make to match our recommendations.\n                            </p>\n                            <DropDisplay title=\"Recommended Transfers\" selected>\n                                <div className=\"calculator-page__info\">\n                                    {calculator.transfers.map((transfer, i) => <p key={i} className=\"calculator-transfers\">{transfer}</p>)}\n                                </div>\n                            </DropDisplay>\n                        </div>\n                    </> : null\n                    }\n                {/* </div> */}\n\n                <Button onClick={() => { \n                    validateInputs() ? handleInputs(inputs) : setError(\"Inputs must be 0 or a positive number\");\n                }} text=\"Calculate\" />\n            </div>\n        </>\n    )\n};\n\nexport default CalculatorPage;","import { connect } from \"react-redux\";\nimport { handleInputs } from \"../../actions/calculator_actions\";\nimport CalculatorPage from \"./CalculatorPage\";\n\nconst mapStateToProps = state => ({ \n    risk: state.risk, \n    calculator: state.calculator\n});\n\nconst mapDispatchToProps = dispatch => ({\n    handleInputs: inputs => dispatch(handleInputs(inputs))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CalculatorPage);","import React from \"react\"; \nimport { Switch, Route } from \"react-router-dom\";\nimport HomePageContainer from \"./Home/HomePageContainer\";\nimport CalculatorPageContainer from \"./Calculator/CalculatorPageContainer\";\n\nconst App = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/home\" component={HomePageContainer} />\n      <Route exact path=\"/calculator\" component={CalculatorPageContainer} />\n      <Route path=\"*\" component={HomePageContainer} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nconst Root = ({ store }) => {\n    return (\n        <Provider store={store}>\n            <HashRouter>\n                <App />\n            </HashRouter>\n        </Provider>\n    );\n}\n\nexport default Root;","import { RECEIVE_INPUTS } from \"../actions/inputs_actions\";\n\nconst CalculatorReducer = (initialState = {}, action) => {\n    Object.freeze(initialState);\n    switch (action.type) {\n        case RECEIVE_INPUTS:\n            return { ...initialState, ...action.inputs };\n        default:\n            return initialState;\n    }\n};\n\nexport default CalculatorReducer;","import { RECEIVE_DIFFERENCES } from \"../actions/differences_actions\";\n\nconst DifferencesReducer = (initialState = {}, action) => {\n    Object.freeze(initialState);\n    switch (action.type) {\n        case RECEIVE_DIFFERENCES:\n            return action.differences;\n        default:\n            return initialState;\n    }\n};\n\nexport default DifferencesReducer; ","import { RECEIVE_NEW_AMOUNTS, REMOVE_NEW_AMOUNTS } from \"../actions/new_amounts_actions\";\n\nconst NewAmountsReducer = (initialState = {}, action) => { \n    Object.freeze(initialState); \n    switch (action.type) {\n        case RECEIVE_NEW_AMOUNTS:\n            return action.newAmounts;\n        case REMOVE_NEW_AMOUNTS:\n            return {};\n        default:\n            return initialState;\n    }\n};\n\nexport default NewAmountsReducer;","import { RECEIVE_TRANSFERS } from \"../actions/transfers_actions\";\n\nconst TransfersReducer = (initialState = {}, action) => { \n    Object.freeze(initialState);\n    switch (action.type) {\n        case RECEIVE_TRANSFERS:\n            return action.transfers;\n        default:\n            return initialState;\n    }\n};\n\nexport default TransfersReducer;","import InputsReducer from \"./inputs_reducer\";\nimport DifferencesReducer from \"./differences_reducer\";\nimport NewAmountsReducer from \"./new_amounts_reducer\";\nimport { combineReducers } from \"redux\"; \nimport TransfersReducer from \"./transfers_reducer\";\n\nconst CalculatorReducer = combineReducers({\n    inputs: InputsReducer, \n    differences: DifferencesReducer, \n    newAmounts: NewAmountsReducer,\n    transfers: TransfersReducer\n});\n\nexport default CalculatorReducer;","import { RECEIVE_RISK_LEVEL } from \"../actions/risk_actions\";\n\n// const defaultState = {\n//     selectLevel: 20\n// };\n\nconst RiskReducer = (initialState = {}, action) => { \n    Object.freeze(initialState); \n    switch (action.type) {\n        case RECEIVE_RISK_LEVEL: \n            return action.payload;\n        default:\n            return initialState;\n    }\n};\n\nexport default RiskReducer;","import { combineReducers } from \"redux\"; \nimport CalculatorReducer from \"./calculator_reducer\";\nimport RiskReducer from \"./risk_reducer\";\n\nconst rootReducer = combineReducers({\n    risk: RiskReducer,\n    calculator: CalculatorReducer\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\"; \n// import logger from \"redux-logger\"; \nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers/root_reducer\";\n\nconst configureStore = (preloadedState = {}) => { \n    // return createStore(rootReducer, preloadedState, applyMiddleware(thunk, logger));\n    return createStore(rootReducer, preloadedState, applyMiddleware(thunk));\n};\n\nexport default configureStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './components/Root';\nimport configureStore from \"./store/store\";\nimport \"./index.css\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root store={store} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}